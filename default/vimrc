if has('vim')

	" Load default Vim8 configuration
	source $VIMRUNTIME/defaults.vim

	" Enable true color
	if exists('+termguicolors')
		let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
		let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
		set termguicolors
	endif

	set t_Co=256

	" https://stackoverflow.com/questions/6427650/vim-in-tmux-background-color-changes-when-paging/15095377#15095377
	if &term =~ '256color'
		" disable Background Color Erase (BCE) so that color schemes
		" render properly when inside 256-color tmux and GNU screen.
		" see also http://snk.tuxfamily.org/log/vim-256color-bce.html
		set t_ut=
	endif

	set mouse=r

	" Press escape to clear previous search highlight
	" https://github.com/tpope/vim-pathogen/issues/102
	" nnoremap <silent> <leader>/ :nohlsearch <cr>

	" Automatically turn on/off paste mode when pasting to avoid stacking indentation

	let &t_SI .= "\<Esc>[?2004h"
	let &t_EI .= "\<Esc>[?2004l"

	inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()

	function! XTermPasteBegin()
		set pastetoggle=<Esc>[201~
		set paste
		return ""
		endfunction
endif

if has('nvim')

	" Specify python to use in nvim
	" Python 3
	let g:python3_host_prog='/usr/local/bin/python3'
	" Python 2
	let g:python_host_prog='/usr/local/bin/python'

endif

" NeoVim prefers ~/.local/share/nvim/plugged
call plug#begin('~/.vim/plugged')
	Plug 'tpope/vim-sensible'
	Plug 'thinca/vim-visualstar'
	Plug 'tmhedberg/SimpylFold'
	Plug 'dracula/vim', { 'as': 'dracula' }
	Plug 'ervandew/supertab'
	Plug 'AndrewRadev/linediff.vim'
	Plug 'tpope/vim-fugitive'
	Plug 'tpope/vim-surround'
	Plug 'airblade/vim-gitgutter'
	Plug 'lervag/vimtex'
	Plug 'mbbill/undotree'
	Plug 'chrisbra/Recover.vim'

	" Plug 'python-mode/python-mode', { 'for': 'python', 'branch': 'develop' }

	" Plug 'desmap/ale-sensible' | Plug 'w0rp/ale'
	Plug 'w0rp/ale'

	" Plug 'chiel92/vim-autoformat'
	" Plug 'vimjas/vim-python-pep8-indent'

call plug#end()

colorscheme dracula

let g:tex_flavor = 'latex'
" https://github.com/lervag/vimtex/issues/1430
let g:vimtex_indent_on_ampersands=0

" Keep track of location list
" let g:ale_open_list = 1
let g:ale_set_loclist = 1
nmap <silent> <F7> :lopen<CR>

" Lint always in Normal Mode
let g:ale_lint_on_text_changed = 'normal'

" Lint when leaving Insert Mode but don't lint when in Insert Mode 
let g:ale_lint_on_insert_leave = 1

" Set ALE's 200ms delay to zero
let g:ale_lint_delay = 0

let g:ale_sign_column_always = 1
let g:ale_completion_enabled = 1

" let g:ale_set_signs = 1
" let g:ale_sign_column_always = 1
" let g:ale_lint_on_text_changed = 'never'
" let g:ale_set_highlights = 0

let g:ale_fixers = {
\ '*': ['remove_trailing_lines', 'trim_whitespace'],
\ 'python': ['remove_trailing_lines', 'trim_whitespace', 'reorder-python-imports', 'isort', 'black'],
\ 'html': ['prettier'],
\ 'css': ['prettier'],
\}
" \ 'python': ['remove_trailing_lines', 'trim_whitespace', 'reorder-python-imports', 'add_blank_lines_for_python_control_statements', 'isort', 'black'],
let g:ale_linters = {
\ 'python': ['pyflakes', 'flake8', 'pylint'],
\}

nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

set smartindent
" Fold using indentation
au FileType python set foldmethod=indent
au FileType python set foldnestmax=1
au FileType python set foldminlines=10
" Open/close folds with space
au FileType python nnoremap <space> za

" Search and highlight while typing while ignoring case when only lower case used
set ignorecase
set smartcase
set incsearch
set hlsearch

" Use spaces for tabs
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
