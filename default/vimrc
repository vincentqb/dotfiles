" Load default Vim8 configuration
"
if !has('nvim')
	source $VIMRUNTIME/defaults.vim
endif

call plug#begin('~/.vim/plugged')
	Plug 'tpope/vim-sensible'
	Plug 'thinca/vim-visualstar'
	Plug 'tmhedberg/SimpylFold'
	Plug 'cormacrelf/vim-colors-github'
	Plug 'ervandew/supertab'
	Plug 'AndrewRadev/linediff.vim'

	" Plug 'python-mode/python-mode', { 'for': 'python', 'branch': 'develop' }

	Plug 'w0rp/ale'
	" Plug 'desmap/ale-sensible'
	"
	" Plug 'shougo/deoplete.nvim'
	" Plug 'roxma/nvim-yarp'
	" Plug 'roxma/vim-hug-neovim-rpc'  " pip3 install neovim
	" Plug 'deoplete-plugins/deoplete-jedi'  " Python autocomplete

	" Plug 'chiel92/vim-autoformat'
	" Plug 'vimjas/vim-python-pep8-indent'

	" if has('nvim')
	" 	Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
	" 	" Plug 'Valloric/YouCompleteMe', { 'do': './install.py' }
	" else
	" 	Plug 'Shougo/deoplete.nvim'
	" 	Plug 'roxma/nvim-yarp'
	" 	Plug 'roxma/vim-hug-neovim-rpc'
	" 	" Plug 'Valloric/YouCompleteMe'
	" endif

call plug#end()

colorscheme github
set mouse=r

" TAB completion
" inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
let g:deoplete#enable_at_startup = 1
" let g:deoplete#enable_at_startup = 1
let g:ale_completion_enabled = 1
let g:ale_lint_on_text_changed = 'never'
let g:ale_set_highlights = 0
let g:ale_fixers = {
\ '*': ['remove_trailing_lines', 'trim_whitespace'],
\ 'python': ['isort', 'ale#fixers#generic_python#BreakUpLongLines', 'autopep8', 'yapf'],
\}
let g:ale_linters = {
\ 'python': ['flake8', 'pylint'],
\}

set smartindent

" Fold using indentation
au FileType python set foldmethod=indent
au FileType python set foldnestmax=1
" au FileType python set foldminlines=20
" Open/close folds with space
au FileType python nnoremap <space> za

""""" Search while typing while ignoring case (when only lower case used)
set ignorecase
set smartcase
set incsearch

""""" Press escape to clear previous search highlight
" nnoremap <esc> :noh<return><esc>

" Automatically turn on/off paste mode when pasting to avoid stacking indentation

let &t_SI .= "\<Esc>[?2004h"
let &t_EI .= "\<Esc>[?2004l"

let &t_SI .= "\<Esc>[?2004h"
let &t_EI .= "\<Esc>[?2004l"

inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()

function! XTermPasteBegin()
        set pastetoggle=<Esc>[201~
        set paste
        return ""
endfunction
